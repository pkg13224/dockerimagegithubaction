# Let's create the workflow.

# Name of the workflow
name: CI/CD for Dockerized Flask App

# On which events we need to trigger the workflow
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

# Define the jobs that has to run when any above specified event trigger.            
jobs:
    # First job name (You can define any job name of your choice)
    build-and-test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.9'

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Run tests
              run: |
                pytest

    # Second Job name
    build-and-publish:
        # needs tell that first complete build-and-test job, then start build-and-pulish job. if needs is not defined then
        # both job can start parallely
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

              # Create docker image
            - name: Setup Docker buildx
              uses: docker/setup-buildx-action@v2

            - name: Login to Docker
              uses: docker/login-action@v2
              with: 
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with: 
                context: .
                file: ./DockerFile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

            - name: Image digest
              run: echo ${{ steps.build-and-publish.outputs.digest }}

     